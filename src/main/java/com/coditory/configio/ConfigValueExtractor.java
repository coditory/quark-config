package com.coditory.configio;

import java.math.BigDecimal;
import java.time.Duration;
import java.time.Instant;
import java.time.ZonedDateTime;
import java.util.Currency;
import java.util.Locale;
import java.util.Optional;

import static com.coditory.configio.api.MissingConfigValueException.missingConfigValueForPath;

interface ConfigValueExtractor {
    <T> Optional<T> getAsOptional(Class<T> type, String path);

    default <T> T getAs(Class<T> type, String path) {
        return getAsOptional(type, path)
                .orElseThrow(() -> missingConfigValueForPath(path));
    }

    default <T> T getAsOrNull(Class<T> type, String path) {
        return getAsOrDefault(type, path, null);
    }

    default <T> T getAsOrDefault(Class<T> type, String path, T defaultValue) {
        return getAsOptional(type, path).orElse(defaultValue);
    }

    // generated by: generateConfigValueExtractor.sh
    // GETTERS

    // String API

    default Optional<String> getOptionalString(String path) {
        return getAsOptional(String.class, path);
    }

    default String getString(String path) {
        return getOptionalString(path)
                .orElseThrow(() -> missingConfigValueForPath(path));
    }

    default String getStringOrNull(String path) {
        return getStringOrDefault(path, null);
    }

    default String getStringOrDefault(String path, String defaultValue) {
        return getOptionalString(path).orElse(defaultValue);
    }

    // Boolean API

    default Optional<Boolean> getOptionalBoolean(String path) {
        return getAsOptional(Boolean.class, path);
    }

    default Boolean getBoolean(String path) {
        return getOptionalBoolean(path)
                .orElseThrow(() -> missingConfigValueForPath(path));
    }

    default Boolean getBooleanOrNull(String path) {
        return getBooleanOrDefault(path, null);
    }

    default Boolean getBooleanOrDefault(String path, Boolean defaultValue) {
        return getOptionalBoolean(path).orElse(defaultValue);
    }


    // Short API

    default Optional<Short> getOptionalShort(String path) {
        return getAsOptional(Short.class, path);
    }

    default Short getShort(String path) {
        return getOptionalShort(path)
                .orElseThrow(() -> missingConfigValueForPath(path));
    }

    default Short getShortOrNull(String path) {
        return getShortOrDefault(path, null);
    }

    default Short getShortOrDefault(String path, Short defaultValue) {
        return getOptionalShort(path).orElse(defaultValue);
    }


    // Byte API

    default Optional<Byte> getOptionalByte(String path) {
        return getAsOptional(Byte.class, path);
    }

    default Byte getByte(String path) {
        return getOptionalByte(path)
                .orElseThrow(() -> missingConfigValueForPath(path));
    }

    default Byte getByteOrNull(String path) {
        return getByteOrDefault(path, null);
    }

    default Byte getByteOrDefault(String path, Byte defaultValue) {
        return getOptionalByte(path).orElse(defaultValue);
    }


    // Integer API

    default Optional<Integer> getOptionalInteger(String path) {
        return getAsOptional(Integer.class, path);
    }

    default Integer getInteger(String path) {
        return getOptionalInteger(path)
                .orElseThrow(() -> missingConfigValueForPath(path));
    }

    default Integer getIntegerOrNull(String path) {
        return getIntegerOrDefault(path, null);
    }

    default Integer getIntegerOrDefault(String path, Integer defaultValue) {
        return getOptionalInteger(path).orElse(defaultValue);
    }


    // Long API

    default Optional<Long> getOptionalLong(String path) {
        return getAsOptional(Long.class, path);
    }

    default Long getLong(String path) {
        return getOptionalLong(path)
                .orElseThrow(() -> missingConfigValueForPath(path));
    }

    default Long getLongOrNull(String path) {
        return getLongOrDefault(path, null);
    }

    default Long getLongOrDefault(String path, Long defaultValue) {
        return getOptionalLong(path).orElse(defaultValue);
    }


    // Float API

    default Optional<Float> getOptionalFloat(String path) {
        return getAsOptional(Float.class, path);
    }

    default Float getFloat(String path) {
        return getOptionalFloat(path)
                .orElseThrow(() -> missingConfigValueForPath(path));
    }

    default Float getFloatOrNull(String path) {
        return getFloatOrDefault(path, null);
    }

    default Float getFloatOrDefault(String path, Float defaultValue) {
        return getOptionalFloat(path).orElse(defaultValue);
    }


    // Double API

    default Optional<Double> getOptionalDouble(String path) {
        return getAsOptional(Double.class, path);
    }

    default Double getDouble(String path) {
        return getOptionalDouble(path)
                .orElseThrow(() -> missingConfigValueForPath(path));
    }

    default Double getDoubleOrNull(String path) {
        return getDoubleOrDefault(path, null);
    }

    default Double getDoubleOrDefault(String path, Double defaultValue) {
        return getOptionalDouble(path).orElse(defaultValue);
    }


    // BigDecimal API

    default Optional<BigDecimal> getOptionalBigDecimal(String path) {
        return getAsOptional(BigDecimal.class, path);
    }

    default BigDecimal getBigDecimal(String path) {
        return getOptionalBigDecimal(path)
                .orElseThrow(() -> missingConfigValueForPath(path));
    }

    default BigDecimal getBigDecimalOrNull(String path) {
        return getBigDecimalOrDefault(path, null);
    }

    default BigDecimal getBigDecimalOrDefault(String path, BigDecimal defaultValue) {
        return getOptionalBigDecimal(path).orElse(defaultValue);
    }


    // Instant API

    default Optional<Instant> getOptionalInstant(String path) {
        return getAsOptional(Instant.class, path);
    }

    default Instant getInstant(String path) {
        return getOptionalInstant(path)
                .orElseThrow(() -> missingConfigValueForPath(path));
    }

    default Instant getInstantOrNull(String path) {
        return getInstantOrDefault(path, null);
    }

    default Instant getInstantOrDefault(String path, Instant defaultValue) {
        return getOptionalInstant(path).orElse(defaultValue);
    }


    // ZonedDateTime API

    default Optional<ZonedDateTime> getOptionalZonedDateTime(String path) {
        return getAsOptional(ZonedDateTime.class, path);
    }

    default ZonedDateTime getZonedDateTime(String path) {
        return getOptionalZonedDateTime(path)
                .orElseThrow(() -> missingConfigValueForPath(path));
    }

    default ZonedDateTime getZonedDateTimeOrNull(String path) {
        return getZonedDateTimeOrDefault(path, null);
    }

    default ZonedDateTime getZonedDateTimeOrDefault(String path, ZonedDateTime defaultValue) {
        return getOptionalZonedDateTime(path).orElse(defaultValue);
    }


    // Duration API

    default Optional<Duration> getOptionalDuration(String path) {
        return getAsOptional(Duration.class, path);
    }

    default Duration getDuration(String path) {
        return getOptionalDuration(path)
                .orElseThrow(() -> missingConfigValueForPath(path));
    }

    default Duration getDurationOrNull(String path) {
        return getDurationOrDefault(path, null);
    }

    default Duration getDurationOrDefault(String path, Duration defaultValue) {
        return getOptionalDuration(path).orElse(defaultValue);
    }


    // Locale API

    default Optional<Locale> getOptionalLocale(String path) {
        return getAsOptional(Locale.class, path);
    }

    default Locale getLocale(String path) {
        return getOptionalLocale(path)
                .orElseThrow(() -> missingConfigValueForPath(path));
    }

    default Locale getLocaleOrNull(String path) {
        return getLocaleOrDefault(path, null);
    }

    default Locale getLocaleOrDefault(String path, Locale defaultValue) {
        return getOptionalLocale(path).orElse(defaultValue);
    }


    // Currency API

    default Optional<Currency> getOptionalCurrency(String path) {
        return getAsOptional(Currency.class, path);
    }

    default Currency getCurrency(String path) {
        return getOptionalCurrency(path)
                .orElseThrow(() -> missingConfigValueForPath(path));
    }

    default Currency getCurrencyOrNull(String path) {
        return getCurrencyOrDefault(path, null);
    }

    default Currency getCurrencyOrDefault(String path, Currency defaultValue) {
        return getOptionalCurrency(path).orElse(defaultValue);
    }

}

